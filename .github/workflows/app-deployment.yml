name: App deployment

permissions:
  actions: write # This is required for uploading and downloading artifacts
  contents: read # This is required for actions/checkout
  id-token: write # This is required for requesting the JWT
  issues: write # This is required for creating issues to approve the apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to run deployment against
        type: choice
        options:
          - develop
          - staging
          - production
        required: true

env:
  ECR_REPOSITORY: shipping-app-${{ inputs.environment }}
  ECS_SERVICE: shipping-app-${{ inputs.environment }}-service
  ECS_CLUSTER: infra-tf-${{ inputs.environment }}-cluster
  CONTAINER_NAME: shipping-app-${{ inputs.environment }}-frontend
  TASK_DEFINITION: shipping-app-${{ inputs.environment }}-service

jobs:
  changes-infra:
    runs-on: ubuntu-latest
    outputs:
      change: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            infra:
              - 'infra/**'    
  infra-deploy:
    name: Apply
    runs-on: ubuntu-latest
    needs: changes-infra
    environment: ${{ inputs.environment }}
    if: needs.changes-infra.outputs.change == 'true'
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find terraform version
        id: maxVer
        uses: clowdhaus/terraform-min-max@v1.2.4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.maxVer.outputs.maxVersion }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets[format('ROLE_ARN_{0}', inputs.environment )] }}

      - name: Terraform init
        run: terraform init -backend-config=config/backend/${{ inputs.environment }}.tfbackend

      - name: Terraform plan
        id: plan
        run: terraform plan -input=false -no-color -var-file=config/environments/${{ inputs.environment }}.tfvars

      - name: Terraform apply
        run: terraform apply -auto-approve -var-file=config/environments/${{ inputs.environment }}.tfvars

  changes-app:
    runs-on: ubuntu-latest
    outputs:
      change: ${{ steps.changesapp.outputs.src }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changesapp
        with:
          filters: |
            src:
              - 'src/**'   
  app-deploy:
    name: deployapp
    runs-on: ubuntu-latest
    needs: changes-app
    environment: ${{ inputs.environment }}
    if: needs.changes-app.outputs.change == 'true'
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets[format('ROLE_ARN_{0}', inputs.environment )] }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set tag
        id: vars
        run: echo "::set-output name=tag::$(git rev-parse --short HEAD)"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
   
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json
   
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
